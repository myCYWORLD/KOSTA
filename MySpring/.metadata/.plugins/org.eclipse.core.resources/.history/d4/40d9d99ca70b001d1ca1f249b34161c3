package com.my.repository;

import javax.sql.DataSource;

import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Repository;

//import javax.servlet.http.HttpSession;


import com.my.dto.Customer;
import com.my.exception.AddException;
import com.my.exception.FindException;

@Repository(value = "customerRepository")
public class CustomerOracleRepository implements CustomerRepository {
	@Autowired 
	@Qualifier(value = "dataSource") //동일 자료형일 경우 qualifier로 구분 (datasource 타입이 여러개일 경우)
	private DataSource ds;

	@Autowired
	private SqlSessionFactory sessionFactory;

	//	public void insert(Customer customer) throws AddException {
	//
	//		Connection con = null; 
	//		PreparedStatement pstmt = null; 
	//		ResultSet rs = null;
	//
	//		String selectIdDupChkSQL = "SELECT * FROM customer WHERE id = ?";
	//
	//		try {
	//			con = ds.getConnection();
	//			pstmt = con.prepareStatement(selectIdDupChkSQL);
	//			pstmt.setString(1, id);
	//			rs = pstmt.executeQuery();
	//			if(rs.next()) {
	//				return new Customer(
	//						rs.getString("id"),
	//						rs.getString("pwd"),
	//						rs.getString("name"),
	//						rs.getString("address"),
	//						rs.getInt("status"),
	//						rs.getString("buildingno")
	//						);
	//			}
	//			throw new FindException ("고객이 없습니다.");
	//		}catch(SQLException e) {
	//			throw new FindException(e.getMessage());
	//		}finally {
	//			MyConnection.close(rs, pstmt, con);
	//		}

	@Override
	public Customer selectById(String id) throws FindException {
		SqlSession session = null;
		try {
			session = sessionFactory.openSession(); //connection과 같은 뜻
			Customer c = session.selectOne("com.my.mapper.CustomerMapper.selectById",id); //entity를 한 개만 찾는 것

			if(c == null) {
				throw new FindException("고객이 없습니다");
			}
			return c;
		}catch(Exception e) {
			e.printStackTrace();
			throw new FindException(e.getMessage());  //pool을 사용할 때는 close 하지 않아도 됨
		}finally {
			if(session != null) {
				session.close(); //DBCP에게 Connection 돌려줌
			}
		}
	}
}

