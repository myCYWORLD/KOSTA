package inheritance;

public class Child extends Parent{   //상위클래스에 매개변수 없는 생성자 필요  
    String c1;
    public Child(){}             //사용자가 다양하게 사용하려면 매개변수 없는 생성자 있어야 확장성이 좋음
    public Child(String c1){     //객체가 생성될 때 생성자 호출 (알아서 상위클래스의 매개변수 없는 생성자 호출)
        super("자식에서 설정한 부모변수",10000);//super()를 사용하면 상위클래스의 매개변수 없는 생성자 외에 다른 생성자 호출)
    	this.c1 = c1;    //(다음 그 다음 코드 진행)
    }
    public void cm() {
    	System.out.println("자식의 기능입니다");
        System.out.println("c1=" + c1);
        pm();  //사용 가능
        System.out.println("p1=" + p1); //상위클래스에서 private으로 선언했으면 하위클래스라도 접근x
    }
}








/*
extends(->'상속' 예약어) + 상위클래스 이름 
상위클래스에서 만들어진 p1 안써도 됨
상위 클래스보다 코드 더 단순해짐
상위클래스와 하위클래스 상속은 단일상속만 가능
상위클래스에서 물려받은 데이터와 기능들까지 호출 가능
super() -> 생성자 내에서만 사용이 가능한 상위클래스 생성자 호출
this() -> 생성자 내에서만 사용 가능 , 현재 객체의 또 다른 생성자 호출
상위클래스 역할을 할 클래스에 매개변수 없는 생성자 갖도록 하는게 좋음 (default생성자에 의존하지 말고 만들기)
**싱글톤 패턴에서만 매개변수 없는 생성자에 private 사용해서 정보은닉**
*상위 클래스에서 private로 변수 선언했으면 하위 클래스에서 상속은 되지만 직접 접근은 할 수 없음 -> 컴파일 오류
* ㄴ public을 통해서 간접접근은 가능
*/